FROM alpine:3.11 as builder

RUN apk add --no-cache python3 python3-dev py3-pip postgresql-dev gcc musl-dev

WORKDIR /src/usr/app/
COPY requirements.txt requirements.txt

# Create the virtual environment 
RUN python3 -m venv ./venv

RUN ./venv/bin/python3 -m pip install http://do-prd-mvn-01.do.viaa.be:8081/repository/pypi-internal/packages/viaa-chassis/0.0.4/viaa_chassis-0.0.4-py3-none-any.whl && ./venv/bin/python3 -m pip install -r requirements.txt


# Create image which will actually run
FROM alpine:3.11 as app

# Install Python and external runtime dependencies only
RUN apk add --no-cache postgresql-dev python3

WORKDIR /src/usr/app/
COPY . .

# Copy the virtual environment from the builder image
COPY --from=builder /src/usr/app/venv/ /src/usr/app/venv/

# Run the application
ENTRYPOINT ["./venv/bin/python3"]
CMD ["app.py"]


# Create image which will run the tests
FROM app as test
RUN apk add --no-cache postgresql python3-dev

RUN ./venv/bin/python3 -m pip install -r requirements-test.txt

# initdb cannot be run as root
RUN chown -R postgres:postgres /src \
&& chmod 777 /src 

# Switch USER to non-root to run
USER postgres
ENTRYPOINT ["./venv/bin/python3"]
CMD ["-m", "pytest", "--cov=app", "--cov=deewee_communication", "--cov=ldap_communication", "./tests"]


# Create image which will run the linter
FROM alpine:3.11 as lint

RUN apk add --no-cache python3 py3-pip

WORKDIR /src/usr/app/
COPY . .

RUN python3 -m pip install flake8

CMD ["flake8", "--exit-zero", "--exclude=./venv"]